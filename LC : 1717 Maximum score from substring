LeetCode : 1717 Ma ximum score from subStrings

You are given a string s and two integers x and y. You can perform two types of operations any number of times.

Remove substring "ab" and gain x points.
For example, when removing "ab" from "cabxbae" it becomes "cxbae".
Remove substring "ba" and gain y points.
For example, when removing "ba" from "cabxbae" it becomes "cabxe".
Return the maximum points you can gain after applying the above operations on s.

 

Example 1:

Input: s = "cdbcbbaaabab", x = 4, y = 5
Output: 19
Explanation:
- Remove the "ba" underlined in "cdbcbbaaabab". Now, s = "cdbcbbaaab" and 5 points are added to the score.
- Remove the "ab" underlined in "cdbcbbaaab". Now, s = "cdbcbbaa" and 4 points are added to the score.
- Remove the "ba" underlined in "cdbcbbaa". Now, s = "cdbcba" and 5 points are added to the score.
- Remove the "ba" underlined in "cdbcba". Now, s = "cdbc" and 5 points are added to the score.
Total score = 5 + 4 + 5 + 5 = 19.
Example 2:

Input: s = "aabbaaxybbaabb", x = 5, y = 4
Output: 20
 

Constraints:

1 <= s.length <= 105
1 <= x, y <= 104
s consists of lowercase English letters.


Solution :

import java.util.Stack;

class Solution {
    private String str;  // Store the modified string

    public int removeSubString(String pair, int score) {
        int totalScore = 0;
        Stack<Character> stack = new Stack<>();
        char firstChar = pair.charAt(0);
        char secChar = pair.charAt(1);

        for (char ch : str.toCharArray()) {
            if (ch == secChar && !stack.isEmpty() && stack.peek() == firstChar) {
                totalScore += score;
                stack.pop();
            } else {
                stack.push(ch);
            }
        }

        // Build the remaining string after removals
        StringBuilder sb = new StringBuilder();
        while (!stack.isEmpty()) {
            sb.insert(0, stack.pop());
        }
        str = sb.toString();  // Update the main string

        return totalScore;
    }

    public int maximumGain(String s, int x, int y) {
        str = s;  // Initialize the main string
        
        // Determine which pair to remove first based on max score
        String firstPair = (x > y) ? "ab" : "ba";
        String secondPair = (firstPair.equals("ab")) ? "ba" : "ab";

        int score = removeSubString(firstPair, Math.max(x, y));
        score += removeSubString(secondPair, Math.min(x, y));

        return score;
    }
}
