Leet Code : 539 ; Minimum Time Diffrence

Given a list of 24-hour clock time points in "HH:MM" format, return the minimum minutes difference between any two time-points in the list.
 

Example 1:

Input: timePoints = ["23:59","00:00"]
Output: 1
Example 2:

Input: timePoints = ["00:00","23:59","00:00"]
Output: 0
 

Constraints:

2 <= timePoints.length <= 2 * 104
timePoints[i] is in the format "HH:MM".


Solution : 

class Solution {
    public int findMinDifference(List<String> timePoints) {
       
       boolean[] seen = new boolean[1440];
       for(String time : timePoints){
        String[] parts = time.split(":");
        int hour = Integer.parseInt(parts[0]);
        int minute = Integer.parseInt(parts[1]);
        int totalMinutes = hour * 60 + minute;

        if(seen[totalMinutes])return 0;
        seen[totalMinutes] = true;
       }
        
        int minDiff = Integer.MAX_VALUE;
        int firstTime = -1, prevTime = -1;
        int lastTime = -1;

        for(int i=0; i<1440; i++){
            if(seen[i]){
                if(firstTime == -1){
                    firstTime = i;
                }
                if(prevTime != -1){
                    minDiff = Math.min(minDiff,i-prevTime);
                }
                prevTime = i;
                lastTime = i;
                            }
        }
        minDiff = Math.min(minDiff, (1440 + firstTime) - lastTime);
        return minDiff;
    }
}
