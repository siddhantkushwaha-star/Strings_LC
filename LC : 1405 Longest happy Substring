LeetCode : 1405 Longest Happy Substring

1405. Longest Happy String
Solved
Medium
Topics
Companies
Hint
A string s is called happy if it satisfies the following conditions:

s only contains the letters 'a', 'b', and 'c'.
s does not contain any of "aaa", "bbb", or "ccc" as a substring.
s contains at most a occurrences of the letter 'a'.
s contains at most b occurrences of the letter 'b'.
s contains at most c occurrences of the letter 'c'.
Given three integers a, b, and c, return the longest possible happy string. If there are multiple longest happy strings, return any of them. If there is no such string, return the empty string "".

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: a = 1, b = 1, c = 7
Output: "ccaccbcc"
Explanation: "ccbccacc" would also be a correct answer.
Example 2:

Input: a = 7, b = 1, c = 0
Output: "aabaa"
Explanation: It is the only correct answer in this case.
 

Constraints:

0 <= a, b, c <= 100
a + b + c > 0


Solution :: 

class Solution {
    public String longestDiverseString(int a, int b, int c) {
           PriorityQueue<Pair> maxHeap = new PriorityQueue<>((p1, p2) -> p2.count - p1.count);

        if (a > 0) maxHeap.offer(new Pair(a, 'a'));
        if (b > 0) maxHeap.offer(new Pair(b, 'b'));
        if (c > 0) maxHeap.offer(new Pair(c, 'c'));

        StringBuilder result = new StringBuilder();

        while (!maxHeap.isEmpty()) {
            Pair first = maxHeap.poll();

            // Check if we already have two consecutive characters
            int len = result.length();
            if (len >= 2 && result.charAt(len - 1) == first.ch && result.charAt(len - 2) == first.ch) {
                if (maxHeap.isEmpty()) break;  // No other character to use

                Pair second = maxHeap.poll();
                result.append(second.ch);
                second.count--;

                if (second.count > 0) maxHeap.offer(second);
                maxHeap.offer(first);  // Put first character back
            } else {
                result.append(first.ch);
                first.count--;

                if (first.count > 0) maxHeap.offer(first);
            }
        }
        return result.toString();
    }
}

class Pair {
    int count;
    char ch;

    Pair(int count, char ch) {
        this.count = count;
        this.ch = ch;
    }
}
